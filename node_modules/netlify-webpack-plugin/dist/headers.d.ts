declare type SimpleHeaderValue = string | number;
declare type ParameterizedHeaderValue = [
    SimpleHeaderValue,
    {
        [token: string]: SimpleHeaderValue | boolean;
    } | SimpleHeaderValue[]
];
declare type SingleValueHeader = ParameterizedHeaderValue | SimpleHeaderValue;
declare type MultiValueHeader = SingleValueHeader[] | {
    [key: string]: SingleValueHeader | boolean;
};
/**
 * Headers can be either single or multi-valued.
 * For single valued headers the value can be a string or number, or
 * it can be an array with the first argument being a string or number, the value of the header
 * and the second argument being an object or array containing the tokens with their values.
 * For the tokens if the value is a boolean is token is name is included if the value is true,
 * otherwise the value is [tokenName]=[tokenValue]; . If tokens is an array tokens are included as [token];
 * For Multi-valued headers the value should be an array of the single valued headers, or an object
 * in the case of an object if the value for a key is a boolean than the header value
 * will be included conditionally. Otherwise the value will be:
 * [key]=[value according to single value spec]
 */
export declare type HeaderValue = MultiValueHeader | SingleValueHeader;
export declare type Headers = {
    [path: string]: Header;
};
export declare type Header = {
    [header: string]: HeaderValue;
};
export declare const createHeaderFile: (headers: Headers) => string;
export {};
